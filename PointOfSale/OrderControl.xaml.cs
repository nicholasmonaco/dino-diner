/*  OrderControl.xaml.cs
*   Author: Nick Monaco
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DinoDiner.Menu;

namespace PointOfSale {
    /// <summary>
    /// Interaction logic for OrderControl.xaml
    /// </summary>
    public partial class OrderControl : UserControl {

        /// <summary>
        /// The currently selected item in the ListBox.
        /// </summary>
        private IOrderItem selectedItem;

        /// <summary>
        /// The previously selected item in the ListBox.
        /// </summary>
        private IOrderItem lastSelectedItem;

        /// <summary>
        /// The constructor for OrderControl.
        /// Automatically generated by Visual Studio.
        /// </summary>
        public OrderControl() {
            InitializeComponent();
            selectedItem = null;
        }

        /// <summary>
        /// Handles what happens when an 'X' button is clicked on an item in the order.
        /// </summary>
        /// <param name="sender">The 'X' button being clicked.</param>
        /// <param name="args">The RoutedEventArgs tied to this event.</param>
        public void OnDeleteClick(object sender, RoutedEventArgs args) {
            Button b = sender as Button;
            IOrderItem item = b.Tag as IOrderItem;

            if (DataContext is Order order && item != null) {
                order.Remove(item);
            }
        }

        /// <summary>
        /// Handles what happens when the "Cancel" button is clicked, which clears all items from the order.
        /// </summary>
        /// <param name="sender">The "Cancel" button being clicked.</param>
        /// <param name="args">The RoutedEventArgs tied to this event.</param>
        public void ClearClick(object sender, RoutedEventArgs args) {
            if (DataContext is Order order) {
                order.Clear();
            }
        }

        /// <summary>
        /// Determines what happens when the selected object is changed.
        /// </summary>
        /// <param name="sender">The ListBox that is being updated.</param>
        /// <param name="e">The SelectionChagedEventArgs of the selection change.</param>
        public void SelectionChange(object sender, SelectionChangedEventArgs e) {
            ListBox buff = sender as ListBox;

            if (selectedItem != null) {
                if (uxListBox != buff) {
                    uxListBox.SelectedItem = null;
                }
            }

            uxListBox = buff;

            if (e.AddedItems.Count > 0) {
                selectedItem = e.AddedItems[0] as IOrderItem;
            }

            if(selectedItem != lastSelectedItem) {
                if (selectedItem is Entree entree) {
                    //Console.WriteLine("Selected an entree");
                    CustomizeEntree page = new CustomizeEntree();
                    page.InitPage(entree, new MenuCategorySelection());
                    page.SetEditedEntree(entree);
                    MainWindow window = Window.GetWindow(this) as MainWindow;
                    window.GetCurrentPage().NavigationService.Navigate(page);

                } else if (selectedItem is Side side) {
                    //Console.WriteLine("Selected a side");
                    SideSelection page = new SideSelection();
                    page.SetEditedSide(side, new MenuCategorySelection());
                    MainWindow window = Window.GetWindow(this) as MainWindow;
                    window.GetCurrentPage().NavigationService.Navigate(page);

                } else if (selectedItem is Drink drink) {
                    //Console.WriteLine("Selected a drink");
                    DrinkSelection page = new DrinkSelection();
                    page.SetReturnPage(new MenuCategorySelection());
                    page.SetEditedDrink(drink);
                    MainWindow window = Window.GetWindow(this) as MainWindow;
                    window.GetCurrentPage().NavigationService.Navigate(page);

                } else if (selectedItem is CretaceousCombo combo) {
                    //Console.WriteLine("Selected a combo");
                    CustomizeCombo page = new CustomizeCombo();
                    page.SetReturnPage(new MenuCategorySelection());
                    Console.WriteLine("Combo size: " + combo.Size);
                    page.SetCombo(combo);
                    MainWindow window = Window.GetWindow(this) as MainWindow;
                    window.GetCurrentPage().NavigationService.Navigate(page);
                }
            }

            lastSelectedItem = selectedItem;
            
        }
    }
}
